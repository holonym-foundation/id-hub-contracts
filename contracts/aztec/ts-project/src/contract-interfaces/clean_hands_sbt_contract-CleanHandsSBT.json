{"transpiled":true,"noir_version":"1.0.0-beta.1+2d73c1d7bc5b1db7","name":"CleanHandsSBT","functions":[{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/9VTvQ6CMBBu+YmCMqiJbia+QREMjCbuvkMDMuqAixuPLjXX9FKbMLQ18Uuaa+Hy/ZSDEgUKNSIWkCQHqAnUAL0Px3WGM7NDnmi6LvlrVhaJIZ9D/x9+6sm/gOT3dP9sBjyXQfHjLFJ3Pq4UzYSvzPKb+cy8mci5+kHOEcdM08aghmehoYci3zvYZ4Y+iQVR/3Q0uM9V1YxJvRD4Y/LtHevHWv8WzqnmX9TIwmdX8bwreMdPvG3Lhq81foEA3dM/z8Ie9lOzgDMuiZqN/nVvro/nrScTECRvfuFT84YGAAA=","debug_symbols":"ndLLDoMgEAXQf5m1CwYftP6KaQwqGhICBrFJY/z3ounDNm5gM+ESzrC5C3SimYda6t5MUFYLKNNyJ432aVkTaKxUSg718RrINhD399PI9RYnx62DEjFPQOjOn2jqfS+VgLKg6y0BpMEiDRZZsMhDBT3/g5ALexuCmH0UZsXO8jhWxDEWxy5RLD0vA0FWfNk1/2Wrj3duJW+UeNWtn3V7aJ97jOKviKM1rehmK7ZKHtroZ4UsodSv9auf","brillig_names":["sync_notes"]},{"name":"get_sbt_by_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"1987412622476755477":{"error_kind":"string","string":"Function get_sbt_by_id can only be called statically"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"sbt_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_sbt_by_id"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAA/92caVPbMBCGHbABB0LC0fukNy1tHZKQpCctve8L+jlTyJ9oP7j9E7T/tnlBSzZCnaGDNOWtZzxOvMruo7Usr6VVCtH2ttbbC+ZzbI6j5ojz09HgJmWXzTHb31b1qCsLxVggYBwiYBwmYIwJGBMCxhECxlECxjECxpSAsUjAOE7AOEHAWCJgnCRgLBMwVggYpwIwhuCcJuGc8cipY/tQvLPRwW+jhwgYDxMwHiFgPErAeIyA8TgB4wkCxpMEjKcIGE8TMJ4hYDxLwDhHwHiOgPE8AeMFAsaLBIyXCBgvEzBeIWCcJ2C8SsB4jYBxgYDxOgHjDQLGmwSMGQFjlYBxkYCxRsBYJ2BsEDAuETA2CRhbBIxtAsZbBIy3CRjvEDDeJWC8R8B4n4BxmYDxAQHjQwLGFQLGRwSMjwkYnxAwPiVgfEbA+JyA8QUB40sCxlcEjK8JGN8QML4lYHxHwPiegPEDAePHAIwhOD+RcK6ScK4F4ow+W9BDvR0Lt7AwCguPsLAHC2ewMAULP7CwAgsXsDAAifdIbEfieKW3I/EZScVI2EUSLJJMkcSJJEkkISLJD0l0SFJDEhiSrJDEhCShs719rrcjiQRJGkiCQJIBJvExSY5JaEzyYhIVk5SYBMQkGyaxMEmEWmGSA5MIGKTHIDgGmTGIi0FSDEJikA+DaBikwiAQBlkwiCGDBHjJxUskXtLwEoSXDATxCJIRhCLIQxCFIAVBAB6yeIjhIYFOGJ0cOhHcpLgB0LjWoj9v0kh+mGNqjkNK7nERXTW17PrU38randRRP4/8tdToHAuiv9EU/WkY/kwW2q7kff26LmJ32BxX874vV/NBJimzqcpsWmWkPmGud70W1l/VxZLlo0jVRWwXw9iuFSx7+rpomdgvRiHb5vaiZG1PeGz/SN9RkjJ5n6dgyeJ8dz1EliiZXF/YmVfl7LY1ZsmEBZu035LyjWxrRibXNFY6/bXX0Pd3Pft37bVe/R/ba2zJ4nx3Pf62veq2ZbfXJOpv0peKbETJflqyUSX7lfdt1825sP3w9nNX32++n1szDn5tC9to3veBtLthdS5RPtvyjy5vyVIli/NBO0XzPVZ2tC7hSKzyNfO9bI4j6jfy+4rD/ohlf4Dbcc72S+oonzrKo30tmM+Ir9F+vkn5aPe9in3ZfM/2tS21Xf2iP/3Nmqvv88i/IfrHg+iv7+ifCMNfF/2lMP7f0T8Zhr8r+sth9C+J/koY/Q3RPxVE/+JOXKD/XMeOC2bUeY9x7J7jArFftFhDxQUzFo/tHx0XQDbrYK04ZHYfMOuwM+uw49I16VHXlEddxQNax5JHXRWPulKPunxexwmPunz6q+xR15hHXT7bvU9/yXUMOz6VZa44LQqgvxhG/07fL320fhfTdRL7iVX+q+XniSB+7o87SX+mfeGKpXza3uvzWuyXHDzCXXTI9vOHZxuNVrfdarR7IX11abGdFSz9wmqf0+9Eun/R5V3Pflfc59HXmWvMoaz8ii1WsklLliiZMOoxB1dc7JN/L/7X9isOmd0/7/VaTkeDbU3fj+NR/36Oc/91b7a2/8hli9HoT6LBMcXIsp9Y5b+b73Zft997pNvsVLu1TrfT6Kyv1790pi392ofw02+mXHNgmVMAAA==","debug_symbols":"tZbRCoIwGIXfZde78Pxplq8SEVNnDMaUqUGI796MqKjrczN2xr9vV984i2ptPV8vLnT9qKrTonzfmMn1IaVl1aqOznt3vXwfq2xbkGXPC+NgwpbHycRJVUChlQ1t2skuATrnrar2suq/0VJek2X5HixkPevEBpEtRPaOyM6J7ILI3hPZJZF9ILKPPDaIXoLoJYhegugliF6C6CWIXoLoJYheguilEL0UopfC8nJN6WaiM7W3r7rRzaH5ah/TfbA/RWSIfWPbOdqtknzayOZ3Dl3g+bumAMk15JgeSQ89AA==","brillig_names":["process_log"]},{"name":"mint","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16725302203251352967":{"error_kind":"string","string":"caller is not a owner"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"3228650590461027108":{"error_kind":"string","string":"recipient already has an SBT"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"623353182881076677":{"error_kind":"string","string":"an SBT with this action nullifier already exists"}},"parameters":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"action_id","type":{"kind":"field"},"visibility":"private"},{"name":"action_nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["mint"]},{"name":"revoke","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4741756306525461753":{"error_kind":"string","string":"caller is not the contract owner"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"sbt_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["revoke"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{"10846690067871036662":{"error_kind":"string","string":"invalid owner"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7V3bbtw4DP2Xec6DSFEX9lcWiyJt02KAICnSdIFF0X9fTxrb01ga1bS6lWK+BJlEZ0idowtFyfK3w4ebd18/vT3efbz/cnjz17fD7f3768fj/d3w6dv3q8O7h+Pt7fHT2/M/H8zph+en8l8+X9+dPn55vH54PLwBz+bqcHP3Yfg1GDN8w8fj7c3hjcfvf18dghVg4npMFNiJYT2GQYDx6zFgQAJyEpBAVgCSgCSWcK2yV8vCLvBY2DFPhQFMojQRhefSRM5PpWPqq6M17rlwtAjnhZ+cj9ud94hjYe9dwXm00T6XRrJnpa1PfXcIfvzuiP6n0if3I9R1P2DB/eBH7wfPprIOfnjDLXnD1JQ3FRpaMFNjCN4UvLGA8FzaQqRCQ0PAsQcisHnZ0JB8ZffDBjLRUVPecEve+ArDcUQ7jTq2OBwzjiMsMdHl4RgMuum7DTK9GJDRx67dD32zH0LX7kfs2/2+2ee+2eeu2berlxbb3Y+j+86cffWzP2Aa86c1fvh/98f52R+43Nw8j4FvMHNTQ2OffEfq2PcavNPsu6eC7w7s1A7AF3xf50dpTLB2R3WN+6kr7UhX2pGubke6eng1dR2WTeOMg+dz2anSi8KDo2OmJXq28/yU/GqKc4wY7VxFi+4Hi15Z3M5i0LZYg0WnLP4Ki4YnFhEXLEajLFZgkZTFCiy+nrXSH2SRtS3WYFHb4nYWyWhbrMHi61mT/kEWAZXFCiwGZXE7i7jbFSBPLAbrCyxGmk6JRAqhUNpOOXtCc1Y25TMwjT4j4Hnhkzq025GiC3V2OwL1oI7Tka1ldXabM+tBHb/bXFwX6mjfaVmd3eZrelAnvJ6d5teojkbUDasTNaJuWR2NClpWR6OChtXZ705lF+rsdtepA3Wc0Rx1y+poRN2wOqARdcvqaETdsDqoOeqW1SFVp2F1NKJuWJ1X9PTia1RHI+qG1SGNqFtWZ7dP7fWgjtOIumV1SNVpWB3d32lYHT1X8GfVQTurQ+6lOqx5tj+qToDpCsxg7Qt1vNGooGV1SNVpWB3NszWszn6fw+xCHc0VNKyO7r41rY5G1A2rY7XvtKwOqToNq1PjdRLsZnVK7xywxsyvk8BS6aqXM/ga1532U9mwo8o63FNl96Ss35Oyfk/K1rgstZ/Kuh1VtsbVo/1UlvZUWd5RZbnfcPHJ/X4nk8H9YPqd+J/c942738E5g4CtN+EeSLStd6QuSNTuvJ1Eaj0u7ILE1lcSPZDotCVWIJGUxO0ktp6A74HE5pOEXZCoIc52EoNOLBVI1ImlAomtp+p6IDG2ngLsgkTN4mwnkTXEqUCihjibSYxGQ5wKJGoWpwKJGuJsJxE0xKlAomZxtpOIGuJUIFFDnO0k2taPpnVBooY4FUjUEGc7iURK4mYSdY/ll0i8eDVHbP5kbAfPLMWoE0sFEnVi2U5i8yeEuyBRtwc2k8hGVywVSNSJZTuJoCFOBRK1JVYgUUOc7SRijcvT41SYwf9Ey5OJ+NtN1Di+XzBR46ZsDnEywaV7LjzQ2No8uLP2Q+6HQ9vrjAbGizfQWCg4RB5Hh4Zf5+sxkhdvRDvdpRFtDOeFT85XeNs8zr1xcN4WnAcTxm4AALRg0/ka8obZIVq0IA+/3wT/dhPpw3s8jXVgznJLSQulhp0+2cYcZwt0buGEibQekz5yU8CkFzOGcAKdXUmTJtjiOHiDdTNX4FPtNkQ7lg7RxcudLng7yhAGzS8XPnUDnLtEtC/6KJjMI5qvtLLbZynnx3btYml0J6KxmxGddYLMYGrcNJgiLHyvsMfv2M59suQ7ThUljAXfmaZvZodu4bvuxf1SFGfNWBbt+fTln1nUbeEKLJK2xRos6rqsAov69F0VFrUtVmDRa1uswaIeIvylHXaeLuEcwt4Fi0H35GqwqJtyFViMGi/WYFE3Q2qwqJFOBRb1xEcVFnV22c4iNH9DXh8saluswCJofrECi6RvKm94gQ6krx9rWR6nvadleby+Sr5pefT9cC3LE7T3NC2P9p6W5Yn6iriW1z1R36/YtDys8jQsD+u6p2l5gsrTrjxoNLBuWh4NDZqWR0ODluUBUnlalkd7T8vyoO73tCxPTMrjpgfKHIYFJr1WKmDCaoxNn80oYAR2QGAHBHYQBBi3HmONAEMCDK/HpHfn3XRrml9cmjZgwnpM+mXmBYzAjhfY8QI76a2LAsatx6STvAUMCTC8HsOCtsNxNYYoqenlOx4GVGb3wk9zl4+wQOWe0S+gRLZyT5gUUCxBZZ4gCGF6UjmwW6KiBBVRhPISFBsRikQoCRvOWBFKZAtQhJIw79CIUCRCidiwIjasiI3MU7QlVDoRxDA9ts+4RGVe9FhCiWx5iS2fGXsNzBdm+LhAZepVQqVb1BAOjaihhS9RLEF5ka2AIlSQoDJP5wwVnlBxyWFm7L2MCpk8GZlpCUdm4WHI3NtQQgUJKh3hF1HpnuJwYn7oggtUOsovokS2MmdqS6goQWX6VwGVORhXQnkJKtO/SqggQUWRrUz/clP+Ahwv4t7AIEJJbEVDIhRLUJkRoIQKEhRKOIyZvmznWc9aWKKcCMUSVGYEKKGCBJVZE5VQIja8iHkvsyViPoiYDyLmM7O5na5RGpIXZonyElTmZXwlFAtQnBltCqjMLawllJOgUGQrs7q5HG/k7oosoDKrmxLKS1DpzFWY7yKjRf6F09khnm4kY+eWmLAWc7oQUYBxAgyvX52gyWxWllBRgspca1pCiWxZkS0rskUiWySy5UR6OZEtL6qXDxJU5qh9CeVEKFFPSWetL40xAybJ+zC9jP0Yl5j14xICwGo7kJ53Chhej0n3+gJm/TgL6fmmgBHYofVjM6QzRwWMwI4X2EnnjNiN7ZoDLjG8HhMEdtKr2QImrMewwA6vt4PFWCCF8as1RQABRmAnHU8WMLweY9f3BSQUYNaPB+isABPXY7zAjhfUJwjaThDoE1a2g+/Dp3+uH47X725vvgyI0z+/3r1/PN7fPX98/Pfz+J93D8fb2+Ont58f7t/ffPj6cPP29v796X8H8/zjr2Gj8mrYnjvF9aeP6OAKnT99PBFgMV5Zawarg+X/AA==","brillig_names":["constructor"]},{"name":"get_owner","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"3688848837296463493":{"error_kind":"string","string":"Function get_owner can only be called statically"}},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"JgACBAEnAAABBIBEJgAABAMmAgEEACYCAgQAHxgAAgABgEMkAAAAQC0EAAGAQycCAAIEgEMmAgMEAToNAAIAAyQAAACMHgIAAQAeAgACADI4AAEAAgADJgIBAQEjAgADAAAAaSQAAAC1HgIAAQkmAgIAAQo4AQIDIwIAAwAAAIUkAAAAxy4MAAIAASUnAIAEBHgADQAAAIAEgAMjAIADAAAAtCkBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEFMzFseSErHoU7AQECJS0AGMoYyg==","debug_symbols":"vVTbioMwEP2XPPswk8m1v7KUYtu0CKLF6sIi/vtG8b5SWdfuS8iEM3MOM5NTsqs7F/dTlNzSJzt8lCxOL2EepYmPyipg5yyK4+h+Gj8zqA9lG/zzESZ1+MzDLGcHVBYC5pKrv2oAX+EWxY4dFK+Cn2AA2YGByx6MCAtoIYRu0UJI1aPNUmlDfWlDHMfgY8C02EG74R3Yi/9H7Xv0XWDfd7XWd5SqRyvUr7Vbsh3YChIz7Ubvqh1hqt0zWP5uBr+076eQf6bw2G7jlOW0MjVQ3TJbMHI2Na/ql3KaJLkhiW9h4mZDEtFSEidJbRInjStTRDFYgBo+Bqqlb6TJdKW1APF6IBp7d9F8agFLOoBoWCc1sZdj5aPPMIvCc+xaU78VyWXk8fnXw83s/pGlF3ctMlcb/+D5zSJwGRA0E/YBYUDkOTzPNw==","brillig_names":["get_owner"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VZ227aQBBdsI2xiYHCH0TqWyvZhOsbUi/5DpTAF/QD/NCX9qvLih37MExUJGaisFK0Zmd95uyZ2Ys3HXcq/eNfJzzHoe65y0J9tqEubyuVIlZpybNzJzy7d8IzuhOesSLPjsDT1zTfEneac6k7zcemEV/yAY7gJfc/AHD2N9RZqLtgVwxIlQmD1MJfl/OXzJ0XZf5PWcBMbfAXhN+3wS+J97e6xcexkN8o1M91q+UzvONLEZ4xeQmXbF2wfWe2CGw/mA1z+CezYd4TJ9KtB2NRzKu1dVxobCmMrfNG7VyrHbaR1rkzzdGKYp4xPpw/8SmoT93y6TFbDLaM2RKwkf6+foR+PPYp9PsK7TwnI3eZw2SnmKPWFjkVG+Afy1zSncckrs99ow11j0HPR6aPxV6B+ljo7/WZvsGfnn1Ja9eUiOmJGpFmfezPbBnY4vrcTx5+x+AHsYhHwvp/Cb9Hoe7BO/T+WPDfY/7PeAttqBHHioQ26u/n5OfwPHCn/PlN/d3lOqV3mF7OpTVbD3/V4Gc2/A+En9vgLwl/YIPfnGUeTPBnJeEXNvw3hD+0yZ/mLDmy4b8n/LEJ/nxP++4n15ZmfQjPE2jXW7ur6pozEfrPGVerM9GE8eH64P7rbVOB61iw8RhOBT9TwY+ElSliPShijT7oGPuKWANFrKEilmYcU0UsTb1yRaxCEUsz7zX1ojhK5zRftqEubyzSOU0Rv5LOaZrf7qQ15VcsaIjjS1j/X0zngQnPakZ7Ds118oG+CyPf1+7X5L8Q+BDvXLDdchm7X6wPm/ViczySVcvZpolnwbjyNvwmwvUY+0t7v3TuU9S6lL77h6CrLzHYCmZLwEYcpe/+oRH/a/RH/2PBxvf/a2M5cZf74YCNG++4tipjbu//pLt54/Vrce3cJP+5u1yv3+t+EfXhZ+lc4DoWbPx8kgt+csHPPWLxO3rU0Oc16RTXrV0rlqt1+48tWosSd37v75j/hPX/E37j2Ki+Zc0/rHbV4Wl32C12r6/zl92E4fvSBZ3+Ab+1O0oNHwAA","debug_symbols":"tdfBaoQwFAXQf8k6C99LNOqvlDJEjUMgRIlaKOK/Nw7TdphZDncjPnmebLzI3cXguu168XGcFtF+7CJMvV39FPO0H1J0yYfgr5fHx6I4L4267S+zjee4rDatoiUqpXBxyHes8vujD060FR/yZdXwfdOYv8WSj08pGo2jSxxd4WiDo2sc3cBoKgqgTUCbgbYC2hpol0C7AtoGaNdAG5hLAuaSgLkkYC4JmEsC5pKAuaR3c9mo301SL7hB4jUSb4A4F0ickDgjcYXENRIvkTgyoYxMKCMTyrCEHnn6ssnbLrh7+xq32D+UsfV7dk+9bE5T74YtubOh/Zez85NWWmp9+9/ngRRLUiYfkg/6AQ==","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"get_sbt_by_address","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"10989981321044677632":{"error_kind":"string","string":"Function get_sbt_by_address can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"addr","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_sbt_by_address"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"10846690067871036662":{"error_kind":"string","string":"invalid owner"},"10989981321044677632":{"error_kind":"string","string":"Function get_sbt_by_address can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"16725302203251352967":{"error_kind":"string","string":"caller is not a owner"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18228876544636886837":{"error_kind":"string","string":"caller is not an owner"},"1987412622476755477":{"error_kind":"string","string":"Function get_sbt_by_id can only be called statically"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"3228650590461027108":{"error_kind":"string","string":"recipient already has an SBT"},"3688848837296463493":{"error_kind":"string","string":"Function get_owner can only be called statically"},"4741756306525461753":{"error_kind":"string","string":"caller is not the contract owner"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"623353182881076677":{"error_kind":"string","string":"an SBT with this action nullifier already exists"},"8425298882021354355":{"error_kind":"string","string":"Function get_sbt_by_nullifier can only be called statically"}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"get_sbt_by_nullifier","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8425298882021354355":{"error_kind":"string","string":"Function get_sbt_by_nullifier can only be called statically"}},"parameters":[{"name":"action_nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_sbt_by_nullifier"]},{"name":"set_owner","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18228876544636886837":{"error_kind":"string","string":"caller is not an owner"}},"parameters":[{"name":"new_owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JgACBAEnAAABBIBEJgAABAMmAgIEASYCAwQAHxgAAwACgEMtCIBDAAEkAAAAQCcCAAEEgEQmAgIEADoNAAEAAiQAAACSHgIAAgAeAgADADI4AAIAAwAEJgICAQEjAgAEAAAAaSQAAAC7JgICAAEuDAACAAMeAgAEAQo4AwQFIwIABQAAAIskAAAAzS8MAAEAAiUnAIAEBHgADQAAAIAEgAMjAIADAAAAuikBAAEF96Hzr6Wt1Mo7AQECJSkBAAEFvh4//z6k9vo7AQECJSkBAAEF/Pn6ovmIHzU7AQECJS0AGMoYyg==","debug_symbols":"5VXBisIwEP2XnHvIZCaTxF9ZFqlapVBaqXVhEf99Y7Fp7QYDUveyl9KEN3lvZl4yF7ErNufDuqz3zUmsPi6iarZ5Vza1X12umdi0ZVWVh/V0W8jbh12PPx3z+rY8dXnbiRWwk5ko6p3/NVL6E/ZlVYgVq2v2GyylHsBS6QAGkBE0EZk7mkhzQNvY0RbD0RYVTMGfmTC0gHarBrAX/4fal6g7Qag7p+oOmgOawTzX7tANYEdIM+3WLKod5KN2z+DUuxm8ad9PoaMUoAMFsE1QAI3+5LFrwLEeG7R4RxuS9LzHBoL1jXr0Z0yHRBxzZZ5Zwu/9o1w5nquhEOXU81yJ1WAd/+tSL4lR4SWxZi5HQbL0Tk/l9EH8QhDSK0Hxl05haLbSkHAGKh7AqFXKGRYHtLHaJpzB6Aawv/spZ0wtChYfWnH1q6+8LfNNVdzn7v5cbydjuPs+FrOJfGybbbE7t8VtNo9jub9OPmmE3nB+gTpD4zk8zw8=","brillig_names":["set_owner"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"CleanHandsSBT"}},{"name":"fields","value":{"fields":[{"name":"owner","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"sbt_count","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"sbts","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"address_to_sbt_id","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"nullifier_to_sbt_id","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::constructor_parameters"}}],"kind":"struct","path":"CleanHandsSBT::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"addr","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_address_parameters"}},{"name":"return_type","type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"action_nullifier","type":{"kind":"field"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_nullifier_parameters"}},{"name":"return_type","type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_nullifier_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"CleanHandsSBT::mint_parameters"}}],"kind":"struct","path":"CleanHandsSBT::mint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"sbt_id","type":{"kind":"field"}}],"kind":"struct","path":"CleanHandsSBT::revoke_parameters"}}],"kind":"struct","path":"CleanHandsSBT::revoke_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::set_owner_parameters"}}],"kind":"struct","path":"CleanHandsSBT::set_owner_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"CleanHandsSBT::get_owner_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::get_owner_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"sbt_id","type":{"kind":"field"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_id_parameters"}},{"name":"return_type","type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_id_abi"}]}},"file_map":{"110":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"136":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::CONTRACT_INSTANCE_LENGTH, contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    /// Safety: The to_address function combines all values in the instance object to produce an address,\n    /// so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    /// Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"},"146":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::{note::{note_header::NoteHeader, note_interface::NoteInterface}, utils::array};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    indexed_tagging_secret::{INDEXED_TAGGING_SECRET_LENGTH, IndexedTaggingSecret},\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    let _ = notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    sync_notes_oracle_wrapper();\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let note_content = array::subarray(fields, read_offset + 2);\n\n            let mut note = Note::deserialize_content(note_content);\n            note.set_header(NoteHeader { contract_address, nonce, storage_slot, note_hash_counter });\n\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n/// Same as `get_indexed_tagging_secret_as_sender`, except it returns the derived tag, ready to be included in a log.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender(sender, recipient).compute_tag(recipient)\n}\n\n/// Returns the tagging secret for a given sender and recipient pair, siloed for the current contract address.\n/// Includes the last known index used to send a note tagged with this secret.\n/// For this to work, PXE must know the ivsk_m of the sender.\n/// For the recipient's side, only the address is needed.\npub unconstrained fn get_indexed_tagging_secret_as_sender(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> IndexedTaggingSecret {\n    let result = get_indexed_tagging_secret_as_sender_oracle(sender, recipient);\n    IndexedTaggingSecret::deserialize(result)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> [Field; INDEXED_TAGGING_SECRET_LENGTH] {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them available\n/// for later querying via the `get_notes` oracle.\npub fn sync_notes() {\n    /// Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    /// to call.\n    unsafe {\n        sync_notes_oracle_wrapper();\n    }\n}\n\nunconstrained fn sync_notes_oracle_wrapper() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n"},"152":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<T, N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"159":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    state_vars::storage::Storage,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicImmutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub fn read(self) -> T {\n        let header = self.context.get_block_header();\n        let mut fields = [0; T_PACKED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::unpack(fields)\n    }\n}\n"},"160":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<T, N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"203":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"245":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        MAX_FIELD_VALUE,\n    },\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        function_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            function_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"26":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"262":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash},\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::{constants::TWO_POW_64, utils::{arrays::array_concat, field::field_from_bytes}};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_contract_class_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_contract_class_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\npub fn compute_tx_logs_hash<let N: u32>(logs: [LogHash; N]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; N * 32];\n    for offset in 0..N {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"291":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"304":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::meta::{derive_deserialize, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"},"309":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 2;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        // We use little-endian ordering to match the order in which U128 defines its limbs.\n        // This is necessary because of how Noir handles serialization:\n        // - When calling a contract function from TypeScript, the serialization in encoder.ts gets used and then Noir\n        //   deserializes using its intrinsic serialization logic (based on the limb order in the struct).\n        // - When calling a contract function from another function, the `serialize` method is invoked on the type\n        //   first.\n        // For this reason if we didn't use the ordering of U128 limbs here and in encoder.ts we would get an arguments\n        // hash mismatch.\n        [self.lo, self.hi]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_u64s_le(fields[0] as u64, fields[1] as u64)\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"325":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    /// Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    /// of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"},"328":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"51":{"path":"std/option.nr","source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"52":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"62":{"path":"/home/caleb/Desktop/work/Holonym/id-hub-contracts/contracts/aztec/clean_hands_sbt_contract/src/main.nr","source":"mod test;\nmod sbt;\n\nuse dep::aztec::macros::aztec;\n\n// TODO: Review and test ------------------------------------\n\n#[aztec]\ncontract CleanHandsSBT {\n    use crate::sbt::SBT;\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, public, view},\n            storage::storage,\n        },\n        prelude::{AztecAddress, Map, PublicImmutable, PublicMutable},\n        protocol_types::{traits::{Serialize, FromField, ToField}},\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        // Contract owner and the only address that can mint SBTs\n        owner: PublicMutable<AztecAddress, Context>,\n        sbt_count: PublicMutable<Field, Context>,\n        sbts: Map<Field, PublicMutable<SBT, Context>, Context>,\n        address_to_sbt_id: Map<AztecAddress, PublicImmutable<Field, Context>, Context>,\n        nullifier_to_sbt_id: Map<Field, PublicImmutable<Field, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(owner: AztecAddress) {\n        assert(!owner.is_zero(), \"invalid owner\");\n        storage.owner.write(owner);\n    }\n\n    #[public]\n    fn set_owner(new_owner: AztecAddress) {\n        assert(storage.owner.read().eq(context.msg_sender()), \"caller is not an owner\");\n        storage.owner.write(new_owner);\n    }\n\n    /// Mint a new SBT.\n    #[public]\n    fn mint(\n        recipient: AztecAddress,\n        action_id: Field,\n        action_nullifier: Field,\n        expiry: u64\n    ) {\n        assert(storage.owner.read() == context.msg_sender(), \"caller is not a owner\");\n        assert(storage.address_to_sbt_id.at(recipient).read() == 0, \"recipient already has an SBT\");\n        assert(storage.nullifier_to_sbt_id.at(action_nullifier).read() == 0, \"an SBT with this action nullifier already exists\");\n\n        let sbt_id = storage.sbt_count.read();\n        let new_sbt = SBT {\n            id: sbt_id,\n            recipient,\n            expiry,\n            action_id,\n            action_nullifier,\n            revoked: false,\n            minter: context.msg_sender(),\n        };\n        storage.sbts.at(sbt_id).write(new_sbt);\n        storage.address_to_sbt_id.at(recipient).initialize(sbt_id);\n        storage.nullifier_to_sbt_id.at(action_nullifier).initialize(sbt_id);\n        storage.sbt_count.write(sbt_id + 1);\n    }\n\n    #[public]\n    #[view]\n    fn get_owner() -> AztecAddress {\n        storage.owner.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_sbt_by_id(sbt_id: Field) -> SBT {\n        storage.sbts.at(sbt_id).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_sbt_by_address(addr: AztecAddress) -> SBT {\n        let id = storage.address_to_sbt_id.at(addr).read();\n        storage.sbts.at(id).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_sbt_by_nullifier(action_nullifier: Field) -> SBT {\n        let id = storage.nullifier_to_sbt_id.at(action_nullifier).read();\n        storage.sbts.at(id).read()\n    }\n\n    #[public]\n    fn revoke(sbt_id: Field) {\n        assert(storage.owner.read() == context.msg_sender(), \"caller is not the contract owner\");\n        let sbt = storage.sbts.at(sbt_id).read();\n        let new_sbt = SBT { \n            id: sbt.id,\n            recipient: sbt.recipient,\n            expiry: sbt.expiry,\n            action_id: sbt.action_id,\n            action_nullifier: sbt.action_nullifier,\n            minter: sbt.minter,\n            revoked: true,\n        };\n        storage.sbts.at(sbt_id).write(new_sbt);\n    }\n}\n"},"63":{"path":"/home/caleb/Desktop/work/Holonym/id-hub-contracts/contracts/aztec/clean_hands_sbt_contract/src/sbt.nr","source":"use dep::aztec::{\n    prelude::AztecAddress,\n    protocol_types::{traits::{Serialize, Deserialize, Packable, FromField, ToField}},\n};\nuse std::meta::derive;\n\n#[derive(Serialize, Deserialize)]\npub struct SBT {\n    pub id: Field,\n    // The address of the user that the SBT is attesting for\n    pub recipient: AztecAddress,\n    // TODO: is u64 the right type for this? Should we use a date library?\n    pub expiry: u64,\n    pub action_id: Field,\n    pub action_nullifier: Field,\n    pub revoked: bool,\n    // We store the minter, in case we change it and need to revoke all SBTs minted by a specific minter\n    pub minter: AztecAddress,\n}\n\nglobal SBT_SERIALIZED_LEN: u32 = 7;\n\nimpl Packable<SBT_SERIALIZED_LEN> for SBT {\n    fn pack(sbt: SBT) -> [Field; SBT_SERIALIZED_LEN] {\n        [\n            sbt.id,\n            sbt.recipient.to_field(),\n            sbt.expiry.to_field(),\n            sbt.action_id,\n            sbt.action_nullifier,\n            sbt.revoked.to_field(),\n            sbt.minter.to_field(),\n        ]\n    }\n\n    fn unpack(fields: [Field; SBT_SERIALIZED_LEN]) -> SBT {\n        SBT {\n            id: fields[0],\n            recipient: AztecAddress::from_field(fields[1]),\n            expiry: fields[2] as u64,\n            action_id: fields[3],\n            action_nullifier: fields[4],\n            revoked: fields[5] as bool,\n            minter: AztecAddress::from_field(fields[6]),\n        }\n    }\n}\n"},"82":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, Packable, Serialize};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n        let success = call_static(gas_for_call(gas_opts), contract_address, args);\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        /// Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            /// Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_opcode(gas, address, args)\n}\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) -> bool {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"94":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.72.1/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::Hash,\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"}}}