{"transpiled":true,"noir_version":"1.0.0-beta.3+0000000000000000000000000000000000000000","name":"CleanHandsSBT","functions":[{"name":"get_owner","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"3688848837296463493":{"error_kind":"string","string":"Function get_owner can only be called statically"}},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"JwACBAEoAAABBIBFJwAABAMnAgEEACcCAgQAHxgAAgABgEQlAAAARSUAAABGLgQAAYBEKAIAAgSARCcCAwQBOw0AAgADJiUAAACSHgIAAQAeAgACADM4AAEAAgADJwIBAQEkAgADAAAAbyUAAAC7HgIAAQknAgIAAQo4AQIDJAIAAwAAAIslAAAAzS8MAAIAASYoAIAEBHgADQAAAIAEgAMkAIADAAAAuioBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEFMzFseSErHoU8AQECJi4AGMoYyg==","debug_symbols":"vZXRjoIwEEX/pc88tDPtTOuvbIxBrYaEgEHcZGP8920JBXSJbIzxhTDkDPe20+lcxd5vL8dNUR3qs1h9XUVZ7/K2qKsQXW+Z2DZFWRbHzfSzkPHBpuPPp7yK4bnNm1asFBDqTPhqH9+ZXPjHoSh9jOCW/eUlQMKlhpFWbobWpE1PazJ6oNnMwFZb18PWSDOF15mw8j32XdJQneWP2X/T7hs77L5d2n1lmBNNiM/tO8NprY6UfbDv8N32O2JiP4rYD4goSZ9QUWpWRTlphjQHvKDC0mGPczi6CxUETamCQO6hgkrRfxzdrzvmgXox70U91C/mubk8wCENEMYeiN08I4Lj7UBjvyuWc8UxlI4AG7tQHEZKvcha0nM4+CA5GEF317rrW4i+86bIt6Xvb/3DpdpNhkD7c/IP8+DU1Du/vzQ+ToZxKKh4qwJnCN0RCQFihiZoBJ1f","brillig_names":["get_owner"]},{"name":"get_sbt_by_address","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"10989981321044677632":{"error_kind":"string","string":"Function get_sbt_by_address can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"addr","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Z3bbts4EIbfJde54GF4mH2VYlEkaVoYCJIiSRdYFH33ldOIdsKxGHHUhFzOTVG3/M3fnyjOiKJGP8++XF/++PZ5d/v17uHsr08/z27uri4ed3e306efv87PLu93Nze7b5+P//lM7f/QzjwJHr5f3O4/Pzxe3D+e/aWNt3B+dn37Zf/34HH6kq+7m+v9J/PrPG+vjJmbKzCH1hqJ1uDBPbcG7yC1Do5oHCHic+PolDtu/Pf55D9s4x/nTvST53fz7zfi72LiH0v8J2hhbu2tXfaPLsw/Fr2Or/0HtbX/pxZH/p96ce/RS7Tv0kske9GoXJKhCYVegkL73DxMo7dwDA34+Rgaj6+PIdq3OHr5u590sUpnVF1/RutKnad0xsF8nIwLPqn2JzRxUL09TBCHU2Y6f6nWccY9MUptrf5tx+i27Lim7FjVlp226EBbdKAxOtiUHWfbshObskNnPn/SjpvtGGVe2CHCK6YULyAevtmQ8dWmbwajDm0py0bjnExMgcAsN3Zm/l53lBBMTZ/4BeHH4Re08GPx88KPwy/K+OPxk/HH4ocy/nj8nPBj8UPhx+BnFQg/Fr8o/Dj8tBV+LH5y/Vbk59XMz+vX/IzkLzx+kj+z+L3/QnV//FJb/7Lpnp+T85fHT64/WPy8nL88fjL+WPyCjD8ePxl/PH6y/sLiF+X6l8dP1l9Y/FDun/P4yfoLhx8ouX7j8ZP1FxY/LfkzAQUESg5FMt0cipH0lYAiOUEOxUqiSUCR6J1DAQnJBBRZpyKgSEjOoTgJyQQUWSbKocizExQUCck5FHnKgYIiaX4ORZ5HoKDInJJBcYPunDX2AAXcayiDbqcLeq5uYcJRKYm1jfcEB91Qt4ag9off56POCI55Ym5IEOQsZhIcdFvnlgTHXDBaRTCEVFogYBaLB93auSVBEIJMghKLmQTDmItcWxKUbIZJMEok4RKUbIZJEGUMcgmCEGQSlGyGR9AryWa4BCWbYRIcdMvslgQlknAJSiRhEjQSSYoEUad69GgygnKniU1wg3lQx1Qn/fh+Kk3QuXRO+KiOq6NTVIzVyYi1x9+Nv+1j1/YhdG1/ixscH2j/DXcXYli2bx3MZ5f16mUXxI+1Kv1Yaw6VlDV6av6Ylp7n+cPFwpsBgvXzqyACKL/ceJrnUkGc6e9Hc9PvFwn4Uzvw0ss1zJRAbTqvLlWY9qf2vn2UHdeUnVNLmx9lpy062BYdbIwOtmQnKNuWndiUHW3e287/qlBj0F74cfgZLfxY/GT8sfhZGX88fjL+WPxACT8WPxB+LH4o/Dj8nBV+LH5R+HH4ebl+K/JbKNQdvOQvLH5B8mcePyf8SvwWCr2FIPkLi18E4cfiJ+OPxQ9l/PH4yfjj8ItKrt94/ILw4/CT+29MfnL9xuIn99+Y/OT6jcXPyv0PHj8QfjkUWVTOoYBkugQUSV9zKE5yAgKKJJo5FC/Rm4AiIZmAIutUOZQgIZmAIiE5hxJlmYiAIiE5h4ISkgkoskqTQUElaT4BRUZKDkXLnJJDMWPmKYuFzhHGPH22K3SOg27I3q5EMroxT8wNCXo5i5kEw5gRc0uCIARLBBdLQeGgW2M3JBjHXJ/bkqDEYiZBHPMqfUuCks1wCUok4RHUSoEg5CKUUchFqCWhYSOUjIaLcNA9x5silJyGjVDCCRehlXDCRijhhIsQJJzwCnZPCGUu5CLcohDQH6xbHQ6lnOPBhg7q2X3s2f0WRVw+zv0Wdzo+0H156jC25N5imjr8yz4IP6tKmBub3Bsbjxs/uX/DCn/L7mPP7rFr9tgze616Zq/fUHSgYfdad+3e9+zeqK7du67d95wp6Dc8aN2y+66jFXQdraDraOVM1+67jla+60zBdx2tfNfR6g1rCg27x8bde0juvXvt3ui2Z0wL81cH6wj37z9juuTeK1h2P31fSF99/B7AZ/cGunYfm3ZvUiFybY5efTi7t7Zr96Ft9+6wwOtD5h5c1+6xG/cBMveu7Tmn5L5r9r5x9snH/jWtmftgunbfdqZgIb2Odkp5MvdRd+2+a/ao2nYf0p1+e/RgWnLfdqxddm9Vz+ytanu+f+Eec/dtx9qCe901e902e7Dp6gQguzqxjV/XFtxD42tpi+s51rV998Fi2h0HinDf9p0fG9WSe984+8PeKFC+cJJMvyZlRZMnm//Ytk+T5YVD2/iSc8l91+xj27cYC+6x5wVz2/hGsGX3oNq+SVdwr9vezlNy3/bN6YJ70/bN6ZL7rtnbrsd941upCu4HLe9tVXJhj37f8+MvMGh97wKVQYtYFagMWsy6RGXMJ0ELVFDGCkVFxkpOxQ1a0NqgSVSUy6mMWSW/QGXQktYlKiBUCCpjvk6uQMWMGZlLVGS2JagM+pbPEpUxizgVqICMFYrKmOsrBSqn7trBvNxn3PE2+0GugyIIFYKKjBWCyqmVhKGpeGWECkFFxgpBRctYoaj4Iaks5yv+1D3zwak4oUJQGTNfKVA59ZDp4FTGjMwFKiCzLUVFZluCilNChaAiY4Wg4sdcX1mmEui9TiHt0wtgMw39KCXC3BG6vB/6ZUSLmkiXuyxownoNXdpRq1RnejruMVe5GhVdyrCoqurLVvVlq/qCqr6gqi9XdbxcVV++6nfRc01RFWtUdDmCosrXqOjH7xdnixjp2ULNT++hyTX0o+aLZzHSZ/FiP6hdhQbXa4yt0KyfydCaCk1FP7A+AqCrOKauoh9f0Q99vqKbxzUGk2twvSZU9EPvuy1ownoNVvSDq/sxit7vd3R8KI1fe0yN0rpCU9EP/ZB3QYPrNdat14Cp0IT1GmcrNHG9xlf04yt+T6gYO6Hi+IT148DEioxkUkGVis5ItD1cBjmdqdBXqE4UCSmqsEZFv1FxX/w0qWJGw9JPQGlQ6QFxUHlfdBHnkoo+c4sqX6OiI7N2JjF0TuUqV6PyVX2dyIwLqmCrVFijoks7lVT0a6KLqlChAvrueFFV1deJK2p3KPbi0OQqrFHR8beksqZKFWpUUEXjxLVxSVXFkI7F2h5enmVtNm8AHY2LqlCjoiNyUeWqVFijilU0YhV5rOoLa8ifeD6nqHJVqhPkIRXgnQJIpjqxEldQ0Tvhi6pQo7K2ShVrVCdygILqRA6wnDk4B1WqmozI+dV9/Zo+/XNxv7u4vLl+mDT7//xxe/W4u7t9/vj47/f5fy7vdzc3u2+fv9/fXV1/+XF//fnm7mr/f2fq+Y9PMAU9AJjcPD2HZG04n/K0/cf9KeKm1Ryn/NTr1PN/","brillig_names":["get_sbt_by_address"]},{"name":"get_sbt_by_nullifier","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"8425298882021354355":{"error_kind":"string","string":"Function get_sbt_by_nullifier can only be called statically"}},"parameters":[{"name":"action_nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"},"visibility":"public"}},"bytecode":"JwACBAEoAAABBIBTJwAABAMnAgIEAScCAwQAHxgAAwACgEsuCIBLAAElAAAAbyUAAACoLgQAAYBMLgQAAoBNLgQAA4BOLgQABIBPLgQABYBQLgQABoBRLgQAB4BSKAIACASATCcCCQQHOw0ACAAJKACAQwQAAygAgEQBAAAoAIBFBAAAKACARgAAACgAgEcBAAEoAIBIBAABKACASQQAAigAgEoEAAQmJQAAAwEeAgADAB4CAAQAMzgAAwAEAAUkAgAFAAAAzCUAAAMqHgIAAwknAgQAAQo4AwQFJAIABQAAAOglAAADPCcCAwAFJwIFBAYtCAAGLQwDBy0MAQgAEAAFACUAAANOLQQAAC0MBwQLKAAEgEYAAQsoAAGARAADJAIAAwAAAS0lAAAGYC8MAAQAAScCAwADJwIFBAYtCAAGLQwDBy0MAQgAEAAFACUAAANOLQQAAC0MBwQLKAAEgEYAAQsoAAGARAADJAIAAwAAAXglAAAGYC0IAQEnAgMECAAQAQMBJwMBBAEAKAECAy0MAwUuCoBGAAUAKAUCBS4KgEYABQAoBQIFLgqARgAFACgFAgUuCoBGAAUAKAUCBS4KgEYABQAoBQIFLgqARgAFACgFAgUuCoBGAAUtCAEDAAABAgEtDgEDJwIBBAcuCIBFAAIjAAAB+Qw4AgEFJAIABQAAApsjAAACCy0NAwIBKAACgEgABC0NBAMBKAACgEkABS0NBQQBKAACgEMABi0NBgUcDAUHBRwMBwYAHAwGBQUBKAACgEoABy0NBwYnAgcEBQA4AgcJLQ0JCCcCBwQGADgCBwotDQoJHAwJCgEcDAoHABwMBwkBADgCAQotDQoHLQwDAS0MBQMtDAgFLQwEAi0MBgQtDAkGJi0NAwUcDAIGAAA4BAYHLwwABwAGJwIIBAcMOAIICSQCAAkAAALGJQAABnIuBAAFgAMoAIAEBAAIJQAABoQuCIAFAAcAKAcCCAA4CAIJLQ4GCS0OBwMBKAACgEgABS0MBQIjAAAB+SgAgAQEeAANAAAAgASAAyQAgAMAAAMpKgEAAQX3ofOvpa3UyjwBAQImKgEAAQW+Hj//PqT2+jwBAQImKgEAAQV07KyxrWDrczwBAQImJQAAAwEtCAEEJwIFBAMAEAEFAScDBAQBACgEAgUtDAUGLQ4BBgAoBgIGLQ4CBi0IAQEnAgIEBAAQAQIBJwMBBAEAKAECAi0MAgUuCoBGAAUAKAUCBS4KgEYABQAoBQIFLgqARgAFLQ0BAgAoAgICLQ4CASsCAAIAAAAAAAAAAAIAAAAAAAAAAC0IAQUnAgYEBQAQAQYBJwMFBAEAKAUCBi0MBgcuCoBGAAcAKAcCBy4KgEYABwAoBwIHLgqARgAHACgHAgctDgIHLQ0BAgAoAgICLQ4CAS0IAQIAAAECAS0OAQItDQUBACgBAgEtDgEFLQgBAQAAAQIBLQ4FAS0IAQUAAAECAS4KgEUABS0IAQYAAAECAS4KgEQABi4IgEUAAyMAAAR0DSgAA4BJAAckAgAHAAAE+CMAAASJLQ0GAwsoAAOARAAEJAIABAAABKYnAgcEADwJAQcnAgMEBy0IAActDAIILQwBCS0MBQotDAYLABAAAwAlAAAHEi0EAAAtDQIDLQ0BBC0NBQctDgMCLQ4EAS0OBwUuCoBHAAYBKAAEgEgAAi0NAgEmJAIABwAABQUjAAAGTycCCAQCDDgDCAkkAgAJAAAFHCUAAAZyACgEAggAOAgDCS0NCQctDQUILQ0GCQsoAAmARAAKJAIACgAABUsnAgsEADwJAQsLKAAIgEMACSQCAAkAAAXcIwAABWAtDQIILQ0BCS0NBQotDQYLJwINBAMMOAoNDiQCAA4AAAWHJQAABnIuBAAIgAMoAIAEBAAEJQAABoQuCIAFAAwAKAwCDQA4DQoOLQ4HDgEoAAqASAAHDjgKBwgkAgAIAAAFxyUAAAhlLQ4MAi0OCQEtDgcFLQ4LBiMAAAZPJwIIBAktCAAJLQwCCi0MAQstDAUMLQwGDQAQAAgAJQAABxItBAAALQ0CCC0NAQktDQYKLgQACIADKACABAQABCUAAAaELgiABQALACgLAgwBKAAMgEUADS0OBw0tDgsCLQ4JAS4KgEgABS0OCgYjAAAGTwEoAAOASAAHLQwHAyMAAAR0KgEAAQUC3G4ngHYSnTwBAQImKgEAAQXonQn+oREtDjwBAQImLgGAA4AGCwCABgACgAckAIAHAAAGnyMAAAaqLgCAA4AFIwAABxEuAAABgAUBAAABgAQAAQEAgAOABIAJLgCAA4AKLgCABYALCwCACoAJgAwkAIAMAAAG/S4BgAqACC4CgAiACwEAgAoAAoAKAQCACwACgAsjAAAGzCgBgAUEAAEDAIAGAAKABiMAAAcRJiUAAAMBLgiARQAFIwAAByINKAAFgEMABiQCAAYAAAeNIwAABzctDQEFLQ0CBi0NAwctDQQILQgBCScCCgQFABABCgEnAwkEAQAoBgIKJwILBAQAKAkCDD8PAAoADC0NCQYAKAYCBi0OBgktDgUBLQ4JAi0OBwMtDggEJi0NAwYMOAUGBwEoAAWASAAGJAIABwAAB6sjAAAIXC0NAQctDQIILQ0DCS0NBAonAgwEBAw4BQwNJAIADQAAB9IlAAAGcgAoCAIMADgMBQ0tDQ0LJwINBAMMOAUNDiQCAA4AAAf3JQAABnIAKAcCDQA4DQUOLQ0ODAA4CwwNJwIMBAQMOAUMDiQCAA4AAAghJQAABnIuBAAIgAMoAIAEBAAFJQAABoQuCIAFAAsAKAsCDAA4DAUOLQ4NDi0OBwEtDgsCLQ4JAy0OCgQjAAAIXC0MBgUjAAAHIioBAAEFRafKcRlB5BU8AQECJi4AGMoYyg==","debug_symbols":"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","brillig_names":["get_sbt_by_nullifier"]},{"name":"set_owner","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18228876544636886837":{"error_kind":"string","string":"caller is not an owner"}},"parameters":[{"name":"new_owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JwACBAEoAAABBIBFJwAABAMnAgIEAScCAwQAHxgAAwACgEQuCIBEAAElAAAARSUAAABGKAIAAQSARScCAgQAOw0AAQACJiUAAACYHgIAAgAeAgADADM4AAIAAwAEJwICAQEkAgAEAAAAbyUAAADBJwICAAEvDAACAAMeAgAEAQo4AwQFJAIABQAAAJElAAAA0zAMAAEAAiYoAIAEBHgADQAAAIAEgAMkAIADAAAAwCoBAAEF96Hzr6Wt1Mo8AQECJioBAAEFvh4//z6k9vo8AQECJioBAAEF/Pn6ovmIHzU8AQECJi4AGMoYyg==","debug_symbols":"5ZXBisIwEIbfJecekswkM/FVlkWqVimUVmpdWMR336SYtquhBREvXkqnfNP5M/mTuYhdsTkf1mW9b05i9XURVbPNu7KpfXS5ZmLTllVVHtbTz0KGB5mePx3zOoSnLm87sVLaAmaiqHfhnazz/9iXVREifc0eeal1xCXqkVYuQaNFc6PRGhxoMgmYkd0NZiPNFP7OBMvXyHexhuolv03+i7pveOg+L3VfGaJIW4B5+c5QXKuziu/kO3i1/J6YyA9F+A1FlLTvqKJUsoo/PmOWHLKCtxIwjF61o/sUyQRNxkZBZNjNbzaBjc4glHYe9jqsHISAgztveHGfs1at02vVdshCnF8rsorqkfWCIDbGDrcKqQc5tNh6pKmckAT6iSSUzySlbz3F41GTsOAM0BBhQLfgDJY6bh9Px1PaGTz8mphwyRloR4saJf9txdVHP3lb5puquE3i/bneTgZz93ss7mb0sW22xe7cFmFaj4NahU5rzgD6w+UDoAycr+Hr/AE=","brillig_names":["set_owner"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"10846690067871036662":{"error_kind":"string","string":"invalid owner"},"10989981321044677632":{"error_kind":"string","string":"Function get_sbt_by_address can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16541607464495309456":{"error_kind":"fmtstring","item_types":[],"length":16},"16725302203251352967":{"error_kind":"string","string":"caller is not a owner"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18228876544636886837":{"error_kind":"string","string":"caller is not an owner"},"1987412622476755477":{"error_kind":"string","string":"Function get_sbt_by_id can only be called statically"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"3228650590461027108":{"error_kind":"string","string":"recipient already has an SBT"},"3688848837296463493":{"error_kind":"string","string":"Function get_owner can only be called statically"},"4741756306525461753":{"error_kind":"string","string":"caller is not the contract owner"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"623353182881076677":{"error_kind":"string","string":"an SBT with this action nullifier already exists"},"8425298882021354355":{"error_kind":"string","string":"Function get_sbt_by_nullifier can only be called statically"}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"]},{"name":"process_log","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"16775516380094354375":{"error_kind":"fmtstring","item_types":[],"length":40},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[{"name":"_log_plaintext","type":{"fields":[{"name":"storage","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"_tx_hash","type":{"kind":"field"},"visibility":"private"},{"name":"_unique_note_hashes_in_tx","type":{"fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"private"},{"name":"_first_nullifier_in_tx","type":{"kind":"field"},"visibility":"private"},{"name":"_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAA/+Wc6XLbNhDHKZu0TcmyZPmK3Svp3bRpKYnU0dNt0/u+lM+KYz8HHyPta7Rf2qer/jFXWsHojDteTPxPMMOhpYV2f1wuARBYuBadl8nsqFV/x9V5vTrj+060XKTucXXOrla6hrqyUIw1AsYVAsZVAsaYgDEhYFwjYFwnYNwgYEwJGOsEjA0Cxk0CxiYB4xYBY4uAsU3AuB2AMQRnh4Rzx5BTj+1D8e5G1z9G9wgY9wkYDwgYbxAwHhIwHhEwPkPA+CwB43MEjM8TML5AwHiTgPEWAeOLBIwvETC+TMD4CgHjqwSMrxEwvk7A+AYB420CxjcJGN8iYLxDwPg2AeM7BIwZAWOXgLFHwNgnYMwJGAsCxgEB45CAcUTAOCZgfJeA8T0CxvcJGD8gYPyQgPEjAsZjAsaPCRg/IWD8lIDxLgHjZwSMnxMwfkHA+CUB41cEjF8TMH5DwPgtAeN3BIzfEzD+QMD4IwHjTwSMPxMw/hKAMQTnryScv5FwTgJxRvcc6JXZgY1b2BiFjUfY2IONM9iYgo0f2FiBjQvYGIDEeyS2I3G8PTuQ+IykYiTsIgkWSaZI4kSSJJIQkeSHJDokqSEJDElWSGJCktDN2XFrdiCJBEkaSIJAkgEW8bFIjkVoLPJiERWLlFgExCIbFrGwSISrwiIHFhEwSY9JcEwyYxIXk6SYhMQkHybRMEmFSSBMsmASQyYJ8JKLl0i8pOElCC8ZGMRjkIxBKAZ5GERhkIJBADpZdGLoJNAIo5FDI4KHFA8AgmsS/XeRIPmnOqfVeUXJDTfRdVPHrqX+UTa+n3quz5C/n1Y6N4LoL4aiPw3Dn8lG27vlQr++FrG7Wp0n5cKXk3KZSeo8VHUeOnXkesLc7zwP669ur+n4KFLXIrbrYWz3a449fV+0TOzXo5Cxeb4pWdsTHtc/0nY0pU654Kk5sri8eB0iS5RM7i/s3Fb13NjacGTCgiLx21S+kXKvksk9jZVOu3gtRmHjNc8eX7zm3ScxXmNHFpcXr+P/xquOLTdek2hRpC0V2ZqS/e7I1pXsj3Jhu1Acg+rvsG3yeR+snz3rPmzHw69toayXC39IDK6q7xLlv0f+0fUdWapkcblsp159jpUdrUs4Eqd+Xn1uVec19Rv5fdtjf82xv8Tt+c71S+qpn3rqI9buVH83qgMx9Jf8Jrr47OI4rj5nVyrDwtdO2ukfdH1toaH+U9HfCKK/l4n+zTD8836qGeb+DkT/Vhj+efy0wvD3RH87DP+Z6N8Owz9/j+kE0V/Mx+U7Yfjn8b8bxv9z/r0w/HP9+2H45/f3IIz+sYw7bkSL4o4zD9X3dv1/b3zZcabYrzusocaZhw6P6x89zoTsyMPa9sjcZ/TIY+fIY8ena9NQ14Ghrm1DXQ1DXfuGutqGuuqGuvYMdbUMdaWGuizvo6W/LGN111CXZaxuGeq6ru2E5fNo6fvrGqsbhrosY8IyVi39tWOoy7KNthwDNA11WfYdls/QdY2vp6H9CtEPhV0PzDLfPFhkp987D2aoPxNfS6zquW9tU64vcer/6fh5M4ife1N5J5M2SPvCN1dlabvm2Isi//us2G96eIS77pFd5R/Mno5OTsf383wwzIuifzKsOfqF1f1OzzvrPkfX970b++bVDH098q3xtJRfUWIl23JkiZIJo17j8c07WvJfxv/aftsjc8del72XnWg51vTz2IgWz3Bc2l/7cHTeljxirPQn0fIabuTYT5z6f1ef3bbuqs/I2XDaPetPz6bF9MGD/GTacfRrH8JP/wJJ9PoyCV0AAA==","debug_symbols":"tZbRCsIgGIXfxWsvpm7+1qtEhNtcCOKG24IYe/c0oqKuz83YkV8/L/zgbKx37Xq9+DiMMzueNhbGzi5+jDltO2dt8iH46+V7mVXlIxr93DBPNpY8LzYt7CiUNIYzF/vyr5TJhww+uJyk2vnfPMnXMNF7sqb9zDOA0ACDBhzAAF2hAQINkGiAQgNqNKBBA9Ama7TJGm2yRptMaJMJbTKhTSa0yYQ2mdAmE9pkQptMUJP3nG42edsG92o4wxq7r8Kz3Cf3032mNHauX5MrLehTgMprrCVvZLl2sVeYigvTZEgGPQA=","brillig_names":["process_log"]},{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{"10846690067871036662":{"error_kind":"string","string":"invalid owner"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"]},{"name":"get_sbt_by_id","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"1987412622476755477":{"error_kind":"string","string":"Function get_sbt_by_id can only be called statically"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"sbt_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_sbt_by_id"]},{"name":"revoke","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"4741756306525461753":{"error_kind":"string","string":"caller is not the contract owner"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"}},"parameters":[{"name":"sbt_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["revoke"]},{"name":"sync_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/7WTyw7CIBBFqcUo0sTEx39MU0y7dOHafyCtLHVRN+766dZkJkyI0QVwEzJMgMNcHoXwKjBKESGCHDEqjAs2Xs7tjDnEqVbBvin5HRijvvhLWH+jkFnk4QPxM50/rJBzmTyfe6F913PTrF8J/z5y+af7y+l//8OzRq9bzCvh/8P4uvfXx/M2ij/SbJGc0ptoOwAqvkT+EvmhJBvn8w+Yb4Svj6KMqNO1tnaNdfZkh8H0dhfwP+KH/QbzqHp4zgQAAA==","debug_symbols":"ZY5bCoMwEEX3Mt/5MFotuhUpEnWUQEgkj0IJ2XsnIjTUn8vc4XA5EVacwz5JvRkHwxhBmUV4aTS1mBjMViol96l8Q5WDNyfvDqFzdV5YDwNv+rpjgHo9766njU0qpFY3id14wi/6wfmPbZ/plai+hZViVnjZbEEvhZz/HPjneViz4BosZuNClnLkLasrmqXpLw==","brillig_names":["sync_notes"]},{"name":"mint","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"16725302203251352967":{"error_kind":"string","string":"caller is not a owner"},"16761564377371454734":{"error_kind":"string","string":"Array index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2236649814169388962":{"error_kind":"string","string":"PublicImmutable already initialized"},"3228650590461027108":{"error_kind":"string","string":"recipient already has an SBT"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"623353182881076677":{"error_kind":"string","string":"an SBT with this action nullifier already exists"}},"parameters":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"action_id","type":{"kind":"field"},"visibility":"private"},{"name":"action_nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["mint"]}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"CleanHandsSBT"}},{"name":"fields","value":{"fields":[{"name":"owner","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"sbt_count","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"sbts","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"address_to_sbt_id","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"nullifier_to_sbt_id","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"CleanHandsSBT::get_owner_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::get_owner_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::constructor_parameters"}}],"kind":"struct","path":"CleanHandsSBT::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"addr","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_address_parameters"}},{"name":"return_type","type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"action_nullifier","type":{"kind":"field"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_nullifier_parameters"}},{"name":"return_type","type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_nullifier_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"CleanHandsSBT::mint_parameters"}}],"kind":"struct","path":"CleanHandsSBT::mint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"sbt_id","type":{"kind":"field"}}],"kind":"struct","path":"CleanHandsSBT::revoke_parameters"}}],"kind":"struct","path":"CleanHandsSBT::revoke_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"sbt_id","type":{"kind":"field"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_id_parameters"}},{"name":"return_type","type":{"fields":[{"name":"id","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"expiry","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"action_id","type":{"kind":"field"}},{"name":"action_nullifier","type":{"kind":"field"}},{"name":"revoked","type":{"kind":"boolean"}},{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"sbt::SBT"}}],"kind":"struct","path":"CleanHandsSBT::get_sbt_by_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"CleanHandsSBT::set_owner_parameters"}}],"kind":"struct","path":"CleanHandsSBT::set_owner_abi"}]}},"file_map":{"115":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/macros/dispatch/mod.nr","source":"use super::utils::compute_fn_selector;\nuse std::panic;\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let name = function.name();\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn size_in_fields(typ: Type) -> u32 {\n    let size = array_size_in_fields(typ);\n    let size = size.or_else(|| bool_size_in_fields(typ));\n    let size = size.or_else(|| constant_size_in_fields(typ));\n    let size = size.or_else(|| field_size_in_fields(typ));\n    let size = size.or_else(|| int_size_in_fields(typ));\n    let size = size.or_else(|| str_size_in_fields(typ));\n    let size = size.or_else(|| struct_size_in_fields(typ));\n    let size = size.or_else(|| tuple_size_in_fields(typ));\n    if size.is_some() {\n        size.unwrap()\n    } else {\n        panic(f\"Can't determine size in fields of {typ}\")\n    }\n}\n\ncomptime fn array_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_array().and_then(|typ: (Type, Type)| {\n        let (typ, element_size) = typ;\n        element_size.as_constant().map(|x: u32| x * size_in_fields(typ))\n    })\n}\n\ncomptime fn bool_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_bool() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn field_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.is_field() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn int_size_in_fields(typ: Type) -> Option<u32> {\n    if typ.as_integer().is_some() {\n        Option::some(1)\n    } else {\n        Option::none()\n    }\n}\n\ncomptime fn constant_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_constant()\n}\n\ncomptime fn str_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_str().map(|typ| size_in_fields(typ))\n}\n\ncomptime fn struct_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_struct().map(|typ: (StructDefinition, [Type])| {\n        let struct_type = typ.0;\n        let generics = typ.1;\n        let mut size = 0;\n        for field in struct_type.fields(generics) {\n            size += size_in_fields(field.1);\n        }\n        size\n    })\n}\n\ncomptime fn tuple_size_in_fields(typ: Type) -> Option<u32> {\n    typ.as_tuple().map(|types: [Type]| {\n        let mut size = 0;\n        for typ in types {\n            size += size_in_fields(typ);\n        }\n        size\n    })\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n"},"119":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"122":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr","source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_initializer, is_fn_internal,\n        is_fn_private, is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform note discovery, since they may need to access notes. This is slightly inefficient\n    // and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $note_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, &[], false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_unconstrained(f: FunctionDefinition) {\n    let context_creation = quote { let mut context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All unconstrained functions perform note discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any.\n    let note_discovery_call = if NOTES.len() > 0 {\n        create_note_discovery_call()\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $note_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_return_public(true);\n    f.set_body(modified_body);\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::discovery::discover_new_notes`, causing for new notes to be added to PXE and made\n/// available for the current execution.\ncomptime fn create_note_discovery_call() -> Quoted {\n    quote {\n        /// Safety: note discovery returns nothing and is performed solely for its side-effects. It is therefore always\n        /// safe to call.\n        unsafe {\n            dep::aztec::discovery::discover_new_notes(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            )\n        };\n    }\n}\n"},"123":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/macros/mod.nr","source":"pub mod dispatch;\npub mod functions;\npub mod utils;\npub mod notes;\npub mod storage;\npub mod events;\n\nuse functions::{stub_registry, utils::transform_unconstrained};\nuse notes::{generate_note_export, NOTES};\nuse storage::STORAGE_LAYOUT_NAME;\n\nuse dispatch::generate_public_dispatch;\nuse utils::{get_trait_impl_method, module_has_storage};\n\nuse crate::discovery::MAX_NOTE_PACKED_LEN;\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `process_log` and `sync_notes` functions PXE requires in order to discover notes.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n    let unconstrained_functions = m.functions().filter(|f: FunctionDefinition| {\n        f.is_unconstrained() & !f.has_named_attribute(\"test\") & !f.has_named_attribute(\"public\")\n    });\n    for f in unconstrained_functions {\n        transform_unconstrained(f);\n    }\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let process_log = generate_process_log();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_notes = generate_sync_notes();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $process_log\n        $public_dispatch\n        $sync_notes\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    let mut max_note_packed_len: u32 = 0;\n    if notes.len() > 0 {\n        max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (StructDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The note discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(nonce).into() \n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_notes`, `do_process_log`\n            /// and `process_private_note_log`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                nonce: Field,\n            ) -> Option<aztec::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::discovery::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n            ) -> pub Option<aztec::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_process_log() -> Quoted {\n    // This mandatory function processes a log emitted by the contract. This is currently used to process private logs\n    // and perform note discovery of either private notes or partial notes.\n    // The bulk of the work of this function is done by aztec::discovery::do_process_log, so all we need to do is call\n    // that function.\n\n    // We'll produce the entire body of the function in one go and then insert it into the function.\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        quote {\n            unconstrained fn process_log(\n                log_plaintext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                tx_hash: Field,\n                unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                first_nullifier_in_tx: Field,\n                recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                // Because this unconstrained function is injected after the contract is processed by the macros, it'll not\n                // be modified by the macros that alter unconstrained functions. As such, we need to manually inject the\n                // unconstrained execution context since it will not be available otherwise.\n                let context = dep::aztec::context::unconstrained_context::UnconstrainedContext::new();\n\n                // TODO(#10727): allow other contracts to process logs and deliver notes\n                let contract_address = context.this_address();\n\n                aztec::discovery::private_logs::do_process_log(\n                    contract_address,\n                    log_plaintext,\n                    tx_hash,\n                    unique_note_hashes_in_tx,\n                    first_nullifier_in_tx,\n                    recipient,\n                    _compute_note_hash_and_nullifier,\n                );\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            unconstrained fn process_log(\n                _log_plaintext: BoundedVec<Field, dep::aztec::protocol_types::constants::PRIVATE_LOG_SIZE_IN_FIELDS>,\n                _tx_hash: Field,\n                _unique_note_hashes_in_tx: BoundedVec<Field, dep::aztec::protocol_types::constants::MAX_NOTE_HASHES_PER_TX>,\n                _first_nullifier_in_tx: Field,\n                _recipient: aztec::protocol_types::address::AztecAddress,\n            ) {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (StructDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_notes() -> Quoted {\n    quote {\n        unconstrained fn sync_notes() {\n            aztec::oracle::note_discovery::sync_notes();\n        }\n    }\n}\n"},"125":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/macros/storage/mod.nr","source":"use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\nuse super::utils::is_note;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract. Only a single struct in the entire contract\n/// should have this macro (or `storage_no_init`) applied to it.\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\npub comptime fn storage(s: StructDefinition) -> Quoted {\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot }, false);\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n/// Only a single struct in the entire contract should have this macro (or `storage`) applied to it.\npub comptime fn storage_no_init(_s: StructDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(\n    typ: Type,\n    slot: Quoted,\n    parent_is_map: bool,\n) -> (Quoted, u32) {\n    assert(\n        typ.as_struct().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_struct().unwrap();\n    let struct_name = container_struct.name();\n\n    if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot }, true);\n        (quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }, 1)\n    } else {\n        let storage_size = if parent_is_map {\n            // Variables inside a map do not require contiguous slots since the map slot derivation is assumed to result\n            // in slots very far away from one another.\n            1\n        } else {\n            let (_, container_struct_generics) = typ.as_struct().unwrap();\n            let stored_struct = container_struct_generics[0];\n\n            if is_note(stored_struct) {\n                // Private notes always occupy a single slot, since the slot is only used as a state variable\n                // identifier.\n                1\n            } else {\n                get_storage_size(typ)\n            }\n        };\n\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        (quote { $struct_name::new(context, $slot)}, storage_size)\n    }\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_struct().is_some() {\n        let (def, generics) = typ.as_struct().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_struct().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n"},"148":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress,\n    constants::CONTRACT_INSTANCE_LENGTH,\n    contract_class_id::ContractClassId,\n    contract_instance::ContractInstance,\n    traits::{Deserialize, FromField},\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> (Field, bool) {}\n\npub unconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_deployer_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_class_id_oracle_avm(address)\n}\npub unconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> (Field, bool) {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_deployer_internal_avm(address) };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) = unsafe { get_contract_instance_class_id_internal_avm(address) };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let (member, exists) =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address) };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n"},"157":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/oracle/note_discovery.nr","source":"use crate::discovery::MAX_NOTE_PACKED_LEN;\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{MAX_NOTE_HASHES_PER_TX, PUBLIC_LOG_DATA_SIZE_IN_FIELDS},\n};\n\n/// Finds new notes that may have been sent to all registered accounts in PXE in the current contract and makes them\n/// available for later querying via the `get_notes` oracle.\npub unconstrained fn sync_notes() {\n    sync_notes_oracle();\n}\n\n#[oracle(syncNotes)]\nunconstrained fn sync_notes_oracle() {}\n\n/// Informs PXE of a note's existence so that it can later be retrieved by the `getNotes` oracle. The note will be\n/// scoped to `contract_address`, meaning other contracts will not be able to access it unless authorized.\n///\n/// The packed note is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\n///\n/// Returns true if the note was successfully delivered and added to PXE's database.\npub unconstrained fn deliver_note(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {\n    deliver_note_oracle(\n        contract_address,\n        storage_slot,\n        nonce,\n        packed_note,\n        note_hash,\n        nullifier,\n        tx_hash,\n        recipient,\n    )\n}\n\n/// The contents of a public log, plus contextual information about the transaction in which the log was emitted. This\n/// is the data required in order to discover notes that are being delivered in a log.\n// TODO(#11639): this could also be used to fetch private logs, but the `BoundedVec` maximum length is that of a public\n// log.\npub struct LogWithTxData {\n    pub log_content: BoundedVec<Field, PUBLIC_LOG_DATA_SIZE_IN_FIELDS>,\n    pub tx_hash: Field,\n    /// The array of new note hashes created by `tx_hash`\n    pub unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    /// The first nullifier created by `tx_hash`\n    pub first_nullifier_in_tx: Field,\n}\n\n/// Fetches a log from the node that has the corresponding `tag`. The log can be either a public or a private log, and\n/// the tag is the first field in the log's content. Returns `Option::none` if no such log exists. Throws if more than\n/// one log with that tag exists.\n/// Public logs have an extra field included at the beginning with the address of the contract that emtitted them.\n// TODO(#11627): handle multiple logs with the same tag.\n// TODO(#10273): improve contract siloing of logs, don't introduce an extra field.\npub unconstrained fn get_log_by_tag(tag: Field) -> Option<LogWithTxData> {\n    get_log_by_tag_oracle(tag)\n}\n\n#[oracle(deliverNote)]\nunconstrained fn deliver_note_oracle(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) -> bool {}\n\n#[oracle(getLogByTag)]\nunconstrained fn get_log_by_tag_oracle(tag: Field) -> Option<LogWithTxData> {}\n"},"162":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::{Packable, ToField}};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context, let N: u32> Storage<N> for Map<K, T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"169":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::Packable};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    // docs:start:public_immutable_struct_write\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read(self) -> T {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub unconstrained fn read(self) -> T {\n        WithHash::unconstrained_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicImmutable<T, &mut PrivateContext>\nwhere\n    T: Packable<T_PACKED_LEN> + Eq,\n{\n    pub fn read(self) -> T {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n"},"170":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_PACKED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Packable<T_PACKED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"196":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr","source":"use crate::{\n    context::{PublicContext, UnconstrainedContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress,\n    block_header::BlockHeader,\n    hash::poseidon2_hash,\n    traits::{Packable, ToField},\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn unconstrained_public_storage_read(\n        context: UnconstrainedContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number as u32,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n"},"214":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/hash/poseidon2.nr","source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"257":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse ec::{pow, sqrt};\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secrect can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"275":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        contract_class_log::ContractClassLog,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{\n        arrays::{array_concat, unsafe_padded_array_length},\n        field::{field_from_bytes, field_from_bytes_32_trunc},\n    },\n};\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n        compute_unique_note_hash(nonce, siloed_note_hash)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog { fields }\n    }\n}\n\nfn compute_siloed_contract_class_log_field(\n    contract_address: AztecAddress,\n    first_field: Field,\n) -> Field {\n    poseidon2_hash([contract_address.to_field(), first_field])\n}\n\npub fn silo_contract_class_log(contract_class_log: ContractClassLog) -> ContractClassLog {\n    if contract_class_log.contract_address.is_zero() {\n        contract_class_log\n    } else {\n        let mut log = contract_class_log;\n        log.log.fields[0] = compute_siloed_contract_class_log_field(\n            contract_class_log.contract_address,\n            log.log.fields[0],\n        );\n        log\n    }\n}\n\npub fn compute_contract_class_log_hash(contract_class_log: ContractClassLog) -> Field {\n    let array = contract_class_log.log.fields;\n    // Safety: The below length is constrained in the base rollup.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    if length == 0 {\n        0\n    } else {\n        poseidon2_hash(array)\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: [u8; 160] = std::mem::zeroed();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..5 {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes[32 * i + j] = item_bytes[j];\n        }\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as std::hash::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = std::hash::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = std::hash::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"289":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr","source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_field() | typ.as_integer().is_some() | typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_struct().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_struct().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `omit`: A list of field names (as `Quoted`) to be excluded from the serialized output.\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, &[], false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, &[], false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], &[], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, &[], false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with Omitted Field and packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// Serializing while omitting `value2`:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, MyStruct, &[quote { self.value2 }], true)\n/// // Returns:\n/// // ([`value_packed[0]`], [`let value_packed = self.value.pack()`])\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    omit: [Quoted],\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // Proceed if none of the omit rules omits this name\n    if !omit.any(|to_omit| to_omit == name) {\n        // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n        let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n        let packable_constraint =\n            quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n        if (should_pack & typ.implements(packable_constraint)) {\n            // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n            // method, add the resulting field array to `aux_vars` and each field to `fields`.\n            let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n            // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n            let name_at_one_token = collapse_to_one_token(name);\n            let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n            // We add the individual fields to the fields array\n            let pack_method = get_trait_impl_method(\n                typ,\n                quote { crate::traits::Packable<$packed_len> },\n                quote { pack },\n            );\n            let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n            for i in 0..packed_len {\n                fields = fields.push_back(quote { $packed_struct_name[$i] });\n            }\n\n            // We add the new auxiliary variable to the aux_vars array\n            aux_vars = aux_vars.push_back(packed_struct);\n        } else if typ.is_field() {\n            // For field we just add the value to fields\n            fields = fields.push_back(name);\n        } else if typ.as_integer().is_some() | typ.is_bool() {\n            // For integer and bool we just cast to Field and add the value to fields\n            fields = fields.push_back(quote { $name as Field });\n        } else if typ.as_struct().is_some() {\n            // For struct we pref\n            let nested_struct = typ.as_struct().unwrap();\n            let params = nested_struct.0.fields(nested_struct.1);\n            let struct_flattened = params.map(|(param_name, param_type): (Quoted, Type)| {\n                let maybe_prefixed_name = if name == quote {} {\n                    // Triggered when the param name is of a value available in the current scope (e.g. a function\n                    // argument) --> then we don't prefix the name with anything.\n                    param_name\n                } else {\n                    // Triggered when we want to prefix the param name with the `name` from function input. This\n                    // can typically be `self` when implementing a method on a struct.\n                    quote { $name.$param_name }\n                };\n                generate_serialize_to_fields(\n                    quote {$maybe_prefixed_name},\n                    param_type,\n                    omit,\n                    should_pack,\n                )\n            });\n            let struct_flattened_fields = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n            );\n            let struct_flattened_aux_vars = struct_flattened.fold(\n                &[],\n                |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n            );\n            fields = fields.append(struct_flattened_fields);\n            aux_vars = aux_vars.append(struct_flattened_aux_vars);\n        } else if typ.as_array().is_some() {\n            // For array we recursively call `generate_serialize_to_fields(...)` for each element\n            let (element_type, array_len) = typ.as_array().unwrap();\n            let array_len = array_len.as_constant().unwrap();\n            for i in 0..array_len {\n                let (element_fields, element_aux_vars) = generate_serialize_to_fields(\n                    quote { $name[$i] },\n                    element_type,\n                    omit,\n                    should_pack,\n                );\n                fields = fields.append(element_fields);\n                aux_vars = aux_vars.append(element_aux_vars);\n            }\n        } else if typ.as_str().is_some() {\n            // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n            // then we add each byte to fields as a Field\n            let length_type = typ.as_str().unwrap();\n            let str_len = length_type.as_constant().unwrap();\n            let as_member = name.as_expr().unwrap().as_member_access();\n            let var_name = if as_member.is_some() {\n                as_member.unwrap().1\n            } else {\n                name\n            };\n            let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n            let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n            for i in 0..str_len {\n                fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n            }\n            aux_vars = aux_vars.push_back(as_bytes);\n        } else {\n            panic(\n                f\"Unsupported type for serialization of argument {name} and type {typ}\",\n            )\n        }\n    }\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub(crate) comptime fn derive_serialize(s: StructDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    quote {\n        impl Serialize<$serialized_len> for $typ {\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: StructDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, &[], false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: StructDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) =\n        generate_serialize_to_fields(quote { self }, typ, &[], packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: StructDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n"},"312":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"326":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n"},"331":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"347":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, get_order_hints_desc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_value_array::{\n    assert_sorted_transformed_value_array, assert_sorted_transformed_value_array_capped_size,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    assert_split_sorted_transformed_value_arrays_desc,\n    get_split_order_hints::{get_split_order_hints_asc, get_split_order_hints_desc, SplitOrderHints},\n};\npub use assert_split_transformed_value_arrays::assert_split_transformed_value_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::{sort_by_counter_asc, sort_by_counter_desc};\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"},"350":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"46":{"path":"std/option.nr","source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"47":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"54":{"path":"/home/caleb/Desktop/work/Holonym/id-hub-contracts/contracts/aztec/clean_hands_sbt_contract/src/main.nr","source":"mod test;\nmod sbt;\n\nuse dep::aztec::macros::aztec;\n\n// TODO: Test\n\n#[aztec]\ncontract CleanHandsSBT {\n    use crate::sbt::SBT;\n    use dep::aztec::{\n        macros::{\n            functions::{initializer, public, view},\n            storage::storage,\n        },\n        prelude::{AztecAddress, Map, PublicImmutable, PublicMutable},\n        protocol_types::{traits::{Serialize, FromField, ToField}},\n    };\n\n    #[storage]\n    struct Storage<Context> {\n        // Contract owner and the only address that can mint SBTs\n        owner: PublicMutable<AztecAddress, Context>,\n        sbt_count: PublicMutable<Field, Context>,\n        sbts: Map<Field, PublicMutable<SBT, Context>, Context>,\n        address_to_sbt_id: Map<AztecAddress, PublicImmutable<Field, Context>, Context>,\n        nullifier_to_sbt_id: Map<Field, PublicImmutable<Field, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(owner: AztecAddress) {\n        assert(!owner.is_zero(), \"invalid owner\");\n        storage.owner.write(owner);\n    }\n\n    #[public]\n    fn set_owner(new_owner: AztecAddress) {\n        assert(storage.owner.read().eq(context.msg_sender()), \"caller is not an owner\");\n        storage.owner.write(new_owner);\n    }\n\n    /// Mint a new SBT.\n    #[public]\n    fn mint(\n        recipient: AztecAddress,\n        action_id: Field,\n        action_nullifier: Field,\n        expiry: u64\n    ) {\n        assert(storage.owner.read() == context.msg_sender(), \"caller is not a owner\");\n        assert(storage.address_to_sbt_id.at(recipient).read() == 0, \"recipient already has an SBT\");\n        assert(storage.nullifier_to_sbt_id.at(action_nullifier).read() == 0, \"an SBT with this action nullifier already exists\");\n\n        let sbt_id = storage.sbt_count.read();\n        let new_sbt = SBT {\n            id: sbt_id,\n            recipient,\n            expiry,\n            action_id,\n            action_nullifier,\n            revoked: false,\n            minter: context.msg_sender(),\n        };\n        storage.sbts.at(sbt_id).write(new_sbt);\n        storage.address_to_sbt_id.at(recipient).initialize(sbt_id);\n        storage.nullifier_to_sbt_id.at(action_nullifier).initialize(sbt_id);\n        storage.sbt_count.write(sbt_id + 1);\n    }\n\n    #[public]\n    #[view]\n    fn get_owner() -> AztecAddress {\n        storage.owner.read()\n    }\n\n    #[public]\n    #[view]\n    fn get_sbt_by_id(sbt_id: Field) -> SBT {\n        storage.sbts.at(sbt_id).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_sbt_by_address(addr: AztecAddress) -> SBT {\n        let id = storage.address_to_sbt_id.at(addr).read();\n        storage.sbts.at(id).read()\n    }\n\n    #[public]\n    #[view]\n    fn get_sbt_by_nullifier(action_nullifier: Field) -> SBT {\n        let id = storage.nullifier_to_sbt_id.at(action_nullifier).read();\n        storage.sbts.at(id).read()\n    }\n\n    #[public]\n    fn revoke(sbt_id: Field) {\n        assert(storage.owner.read() == context.msg_sender(), \"caller is not the contract owner\");\n        let sbt = storage.sbts.at(sbt_id).read();\n        let new_sbt = SBT { \n            id: sbt.id,\n            recipient: sbt.recipient,\n            expiry: sbt.expiry,\n            action_id: sbt.action_id,\n            action_nullifier: sbt.action_nullifier,\n            minter: sbt.minter,\n            revoked: true,\n        };\n        storage.sbts.at(sbt_id).write(new_sbt);\n    }\n}\n"},"55":{"path":"/home/caleb/Desktop/work/Holonym/id-hub-contracts/contracts/aztec/clean_hands_sbt_contract/src/sbt.nr","source":"use dep::aztec::{\n    prelude::AztecAddress,\n    protocol_types::{traits::{Serialize, Deserialize, Packable, FromField, ToField}},\n};\nuse std::meta::derive;\n\n#[derive(Serialize, Deserialize)]\npub struct SBT {\n    pub id: Field,\n    // The address of the user that the SBT is attesting for\n    pub recipient: AztecAddress,\n    /// Expiry should be UNIX timestamp in seconds\n    // TODO: is u64 the right type for this? Should we use a date library?\n    pub expiry: u64,\n    pub action_id: Field,\n    pub action_nullifier: Field,\n    pub revoked: bool,\n    // We store the minter, in case we change it and need to revoke all SBTs minted by a specific minter\n    pub minter: AztecAddress,\n}\n\nglobal SBT_SERIALIZED_LEN: u32 = 7;\n\nimpl Packable<SBT_SERIALIZED_LEN> for SBT {\n    fn pack(sbt: SBT) -> [Field; SBT_SERIALIZED_LEN] {\n        [\n            sbt.id,\n            sbt.recipient.to_field(),\n            sbt.expiry.to_field(),\n            sbt.action_id,\n            sbt.action_nullifier,\n            sbt.revoked.to_field(),\n            sbt.minter.to_field(),\n        ]\n    }\n\n    fn unpack(fields: [Field; SBT_SERIALIZED_LEN]) -> SBT {\n        SBT {\n            id: fields[0],\n            recipient: AztecAddress::from_field(fields[1]),\n            expiry: fields[2] as u64,\n            action_id: fields[3],\n            action_nullifier: fields[4],\n            revoked: fields[5] as bool,\n            minter: AztecAddress::from_field(fields[6]),\n        }\n    }\n}\n"},"75":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_FIELD_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let args = args.push_front(function_selector.to_field());\n\n        call_static(gas_for_call(gas_opts), contract_address, args);\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_opcode(gas, address, args)\n}\n\nunconstrained fn call_static(gas: [Field; 2], address: AztecAddress, args: [Field]) {\n    call_static_opcode(gas, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n"},"94":{"path":"/home/caleb/nargo/github.com/AztecProtocol/aztec-packages/v0.78.1/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__SECRET_HASH,\n    },\n    hash::{poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice, sha256_to_field},\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n"}}}