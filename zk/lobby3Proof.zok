// This is intended to be the complete proof used for Lobby3. It is slightly more 
// abstract than Lobby3's use case requires. This more abstract version simply
// allows for more use cases to be built with i.
// The general proof scheme here should do the following:
// 1. Prove, via a Merkle proof, that the user's credentials have been signed by Holonym
// 2. Prove that the creds field in the user's preimage equals some verifier-determined 
//    value (e.g., "US")
// 3. Prove that hash(nullifier+message_chosen_by_verifier)  is valid. This allows
//    verifier to check that the user is not double spending their credentials wtihin
//    the context determined by the verifier (e.g., in a certain election)


import "hashes/blake2/blake2s" as blake2s;
import "hashes/poseidon/poseidon" as poseidon;
import "utils/pack/u32/pack128" as pack128;

const u32 DEPTH = 32;

// Use poseidon to hash a u32[8] value (such as a blake2s output)
// @param bh - blake2s hash
def poseidonHashU328(u32[8] bh) -> field {
    return poseidon([pack128(bh[0..4]), pack128(bh[4..8])]);
}

// Proves that user knows preimage and that preimage includes publicly known address and creds
def assertValidPreimage(field leaf, u32[5] address, u32[7] creds, u32[4] nullifier) {
    u32[1][16] preimage = [[...address, ...creds, ...nullifier]];
    u32[8] blake2sHashedLeaf = blake2s(preimage);
    assert(poseidonHashU328(blake2sHashedLeaf) == leaf);
}

// Proves that user's leaf is in set of leaves signed by Holonym
// Forked from https://github.com/Zokrates/ZoKrates/blob/deploy/zokrates_cli/examples/merkleTree/pedersenPathProof3.zok
def merkleProof(field root, field leaf, bool[DEPTH] directionSelector, field[DEPTH] path) -> bool {
    // Start from the leaf
    field mut digest = leaf;

    // Loop up the tree
    for u32 i in 0..DEPTH {
        field[2] preimage = directionSelector[i] ? [path[i], digest] : [digest, path[i]];
        digest = poseidon(preimage);
    }

    assert(digest == root);
}

// Proves that user_nullifier+verifier_message is indeed the preimage of publicly provided nullifierHash
// This allows verifier to prevent sybil attacks
// @param nullifierHash - blake2s hash of nullifier+verifier_message
def assertValidNullifier(u32[8] nullifierHash, u32[4] nullifier, u32[12] message) {
    u32[1][16] preimage = [[...nullifier, ...message]];
    assert(blake2s(preimage) == nullifierHash);
}


def main(u32[5] address, u32[7] creds, field root, u32[8] nullifierHash, u32[12] message, private field leaf, private bool[DEPTH] directionSelector, private field[DEPTH] path, private u32[4] nullifier) {
    assertValidPreimage(leaf, address, creds, nullifier);

    // merkleProof
    field[2] leafAsFieldArr = [pack128(leaf[0..4]), pack128(leaf[4..8])];
    merkleProof(root, leafAsFieldArr, bool[DEPTH] directionSelector, field[DEPTH] path);

    assertValidNullifier(nullifierHash, nullifier, message);
    return;
}

// NOTE: The scalar field used by zk-kit's poseidon hash is
// 21888242871839275222246405745257275088548364400416034343698204186575808495617
// while the field used by ZoKrates is 
// 21888242871839275222246405745257275088696311157297823662689037894645226208583.
// Will this cause problems?

// TODO: Using separate variables for the merkle proof and for the other proofs is 
// problematic. It allows the user to prove that they know (a) the preimage of some
// leaf in the tree and (b) a preimage with the desired properties. (a) and (b) could
// be different preimages, and the proof would still succeed.

// @Schaeff Apr 21 2021 14:00 in ZoKrates Gitter: "the field type cannot hold more 
// than 253 bits, hence the usage of two 128 bit values to represent 256 bits."

// If a single field cannot represent 256 bits, and if we need 256 bits to represent 
// a blake2s hash (for representing a leaf), then we cannot use a field to represent
// a leaf. And we cannot use ZoKrates' implementation of poseidon.

// Maybe it can work...
// @dark64 Sept 2 2022 06:15 in ZoKrates Gitter: If you are using bn128 then u32[8] won't 
// fit in a single field (max 254 bits). You can pack the output to field[2] like this:
// // import "hashes/blake2/blake2s" as blake2s;
// // import "utils/pack/u32/pack128" as pack128;
// u32[8] h = blake2s(input);
// field[2] r = [pack128(h[0..4]), pack128(h[4..8])];
// We do this for sha256 here https://github.com/Zokrates/ZoKrates/blob/develop/zokrates_stdlib/stdlib/hashes/sha256/512bitPacked.zok#L19



// NOTE: Looks like you are going to have to hash the blake2s hash with poseidon.
// So... poseidon(blake2s([...address, ...creds, ...nullifier]))
// This is because the blake2s output requires 256 bits, but poseidon can only
// accept values less than 254 bits.
