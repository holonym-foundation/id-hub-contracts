import "ecc/edwardsAdd" as add;
import "ecc/edwardsScalarMult" as multiply;
import "ecc/edwardsNegate" as invert;
from "ecc/babyjubjubParams" import BABYJUBJUB_PARAMS as bjj;

import "./messageFromPoint" as messageFromPoint;


/* 
ElGamal encryption on BabyJubJub curve 
--------------------------------------
Inputs: 
    xBits: secret key
    encrpytedMessage: two points, c1 and c2, representing the message that was encrypted (see encryptElGamal.zok)
*/


def main(private bool[256] xBits, public field[2][2] encryptedMessage) -> u32 {
    field[2] c1 = encryptedMessage[0]; 
    field[2] c2 = encryptedMessage[1];
    field[2] s = multiply(xBits, c1, bjj); // Compute shared secret of g^(xy) like Diffie hellman (h is other party's pubkey where h = g^x and x is other party's private key)
    field[2] sInverse = invert(s);
    field[2] m = add(c2, sInverse, bjj); // Compute message
    return messageFromPoint(m);
}