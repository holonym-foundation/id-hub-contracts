import "hashes/blake2/blake2s" as leafHash;
def leafFromData(u32[5] address, u32[7] creds, u32[4] nullifier) -> u32[8] {
    u32[1][16] preimage = [[...address, ...creds, ...nullifier]];
    return leafHash(preimage);
}

// In V0, leaves are publicly revealed since there's no global Merkle tree. They're not even leaves yet.
// In V1, leaves will be private, and their existence in the global Merkle tree will be proven.
def main(u32[8] leaf, u32[5] address, u32[7] creds, u32[8] nullifierHash, private u32[4] nullifier) {
    assert(leafFromData(address, creds, nullifier) == leaf);
    // Allow user to supply 000000... as nullifier hash if they don't want to "spend" their credential
    u32[8] allZeroes = [0; 8];
    u32[1][16] nullifierPadded = [[...nullifier, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
    assert((nullifierHash == allZeroes) || nullifierHash == leafHash(nullifierPadded));
    return;
}
