import "hashes/blake2/blake2s" as leafHash; //NOTE: must use quantum- and length-extension- resistant hash function

/* Asserts that a leaf's preimage begins with a certain address and it was constructed from a previous leaf by modifying the secret
 * This is useful because the signed leaf can be signed by the authority, but the authority must know the secret and all of its contents to sign off on it
 * With this function, the user can take that old leaf and generate a new leaf and prove everything is the same except the secret
 * This function is called whenever adding a SmallCredential to the Hub
 *
 */
def main(u32[8] signedLeaf, u32[8] newLeaf, u32[5] address, private u32[7] creds, private u32[4] oldSecret, private u32[4] newSecret) {
    u32[1][16] oldPreimage = [[...address, ...creds, ...oldSecret]];
    u32[1][16] newPreimage = [[...address, ...creds, ...newSecret]];
    assert(leafHash(oldPreimage) == signedLeaf);
    assert(leafHash(newPreimage) == newLeaf);
    return;
}


